#! /usr/bin/env bash
##########################################################################
##									##
##	bckincdaily is automatically generated,				##
##		please do not modify!					##
##									##
##########################################################################

##########################################################################
##									##
## Script ID: bckincdaily						##
## Author: Mark Grant							##
##									##
## Purpose:								##
## Keeps copying the level 0 incremental file so that each day		##
## a level 1 backup is made. This effectively makes it a 		##
## differential, as opposed to incremental, backup. Runs over		##
## the entire file system. It allows for a cycle of 7 backups		##
## for daily coverage, designated by the short day form. The		##
## timing element is expected to be delivered via cron.			##
##									##
## Syntax:	bckincdaily [-h || -V ]					##
##									##
## Exit Codes:	0 & 64 - 113 as per C/C++ standard			##
##		0 - success						##
##		64 - Invalid arguments					##
##		65 - Failed mounting backup NAS server			##
##		66 - backup.snar non-existent or inaccesssible		##
##		67 - trap received					##
##									##
##########################################################################

##########################################################################
##									##
## Changelog								##
##									##
## Date		Author	Version	Description				##
##									##
## 02/04/2010	MG	1.0.1	Created.				##
## 26/08/2010	MG	1.0.2	Now uses variables for some backup	##
##				information. These variables are set at	##
##				the start of the script enabling some	##
##				degree of portability.			##
## 27/08/2010	MG	1.0.3	Introduced temporary patch to avoid	##
##				FreeBSD gtar core dumping. See 'Known	##
##				problem' comment.			##
## 03/09/2010	MG	1.0.4	Upgrade to OpenSUSE 11.3 introduced	##
##				same tar core dump probem, so		##
##				introduced same temporary fix.		##
## 11/09/2010	MG	1.0.5	Changed to use gzip.			##
## 22/09/2010	MG	1.0.6	Added df command to mail and log disk	##
##				stats whilst backup share is attached.	##
## 18/11/2010	MG	1.0.7	Changed to emit help and version on	##
##				input of correct flag as argument. Also	##
##				stored version in string in Init section##
## 20/11/2010	MG	1.0.8	Removed shutdown from script. In cron	##
##				can use script.sh && shutdown		##
## 23/11/2010	MG	1.0.9	The segfault has been fixed in GNU tar	##
##				listed incremental backups, so the	##
##				temporary fix has been removed,		##
## 28/11/2010	MG	1.0.10	Changed script to read parameters from	##
##				etclocation/backups.conf.		##
## 14/12/2010	MG	1.0.11	Removed FreeBSD unsupported -B switch	##
##				from df -ah mailx command.		##
## 16/12/2010	MG	1.0.12	Allow the mailing of df -ah command	##
##				for any OS, not just FreeBSD.		##
## 10/01/2012	MG	1.0.13	Removed the .sh extension from the	##
##				command name. Add .gvfs file exclusion	##
##				to support Gnome desktops and Ubuntu.	##
## 06/11/2012	MG	1.0.14	Reverted to use the .sh file extension.	##
##				Added exclusion to tar command for /run	##
##				and /var/run following inclusion of	##
##				/run in Linux.				##
## 17/11/2012	MG	1.0.15	After deletion of last copy of this	##
##				backup, empty the NAS trash.		##
## 20/12/2012	MG	1.0.16	Added Host name and day of week to	##
##				email message subject line.		##
## 06/02/2013	MG	1.0.17	Added mailing of backup file date	##
##				hierarchy after backup.			##
## 26/02/2013	MG	1.0.18	Changed command line option processing	##
##				to use getopts.				##
## 01/04/2013	MG	1.0.19	Moved config files to new backups	##
##				directory under sysconfdir. Added	##
##				exclude files for system, weekly, daily	##
##				and data.				##
## 22/08/2013	MG	1.0.20	Debian best practice documentation	##
##				requires that programs placed in the	##
##				PATH should not have extensions as the	##
##				programs may be rewritten in a		##
##				different language. This would then	##
##				require a name change, or, if left	##
##				as-is would cause confusion. So name	##
##				changed to remove .sh extension.	##
## 30/10/2013	MG	1.0.21	Removed '-' prepending operations in	##
##				the tar command. Added --exclude-caches	##
##				to the tar command.			##
## 07/01/2014	MG	1.1.1	Changed stdout & stderr message output	##
##				to use a function directing to one or	##
##				other based on a status. Changed	##
##				version option to -V. Added usage of	##
##				standard error routine.			##
##									##
##########################################################################

exec 6>&1 7>&2 # Immediately make copies of stdout & stderr

####################
## Init variables ##
####################
script_exit_code=0
version="1.1.1"				# set version variable
etclocation=@sysconfdir@/backups	# Path to etc directory
outputprefix="bckincdaily: "

# Get system name for implementing OS differences
osname=$(uname -s)

script_short_desc=$(uname -n)" "$(date +%A)" Daily Incremental Backup"

###############
## Functions ##
###############

# Output $1 to stdout or stderr depending on $2 and mail to recipient
output()
{
	if [ $2 = 0 ]
	then
		echo "$outputprefix$1"
	else
		echo "$outputprefix$1" 1>&2
	fi
	if [ "$mail_recipient" != "" ]
	then
		echo $1 | mailx -s "$script_short_desc" $mail_recipient
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]
	then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to cleanup and return exit code
script_exit()
{
# FD's 6 & 7 may or may not be open at this point so test individually for closing.
# This reads lsof with ANDed conditions of suppress warnings, FD 6, output only FD
# for this current PID and pipe it's output to wc to count the lines. If FD 6 is
# open, 2 lines result, PID number and f6.
if [ $(lsof -aw -d 6 -F f -p $$ | wc -l) -gt 0 ]
then
	exec 1>&6 6>&-	# Restore stdout and close FD 6
fi
if [ $(lsof -aw -d 7 -F f -p $$ | wc -l) -gt 0 ]
then
	exec 2>&7 7>&-	# Restore stderr and close FD 7
fi

# The backup share might or might not be mounted.
if [ "$(chkbckshare -bt)" = "TRUE" ]
then
	detbckshare
fi

exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=67
output "Script terminating due to trap received." 1
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

##########
## Main ##
##########
# Process command line arguments with getopts.
while getopts :hV arg
do
	case $arg in
	h)	echo "Usage is $0 [options]"
		echo "	-h displays usage information"
		echo "	OR"
		echo "	-V displays version information"
		script_exit_code=0
		script_exit
		;;
	V)	echo "$0 version "$version
		script_exit_code=0
		script_exit
		;;
	\?)	script_exit_code=64
		output "Invalid argument -$OPTARG." 1
		script_exit
		;;
	esac
done

# Read parameters from $etclocation/backups.conf
IFS="="

exec 3<$etclocation/backups.conf
while read -u3 -ra input
do
	case ${input[0]} in
	dir)
		bckupdir=${input[1]}
		;;
	notifyuser)
		mail_recipient=${input[1]}
		;;
	esac
done
exec 3<&-

# Build the backup & incremental file names and paths
backpath="/mnt/$bckupdir/backup"$(date +%a)".tar.gz"
snarpath="/mnt/$bckupdir/backup"$(date +%a)".snar"

# Check to see if the NAS backup server is mounted, if not, mount
if [ "$(chkbckshare -bt)" = "FALSE" ]
then
	attbckshare
	std_cmd_err_handler $?
fi

# Re-direct stdout & stderr to backup logs and write initial entries
exec 1>> /mnt/$bckupdir/backup.log 2>> /mnt/$bckupdir/backuperror.log

output "Attempting to process backup - "$backpath 0
echo "Attempting to process backup - "$backpath 1>&2

date
date 1>&2

# If the backup or incremental files exists, delete.
# (Just in case full backup has not done this)
if [ -f $backpath ]
then
	rm $backpath
	std_cmd_err_handler $?
fi

if [ -f $snarpath ]
then
	rm $snarpath
	std_cmd_err_handler $?
fi

# Empty the NAS trashbox
rm -fr /mnt/$bckupdir/trashbox/*
std_cmd_err_handler $?

# Copy level 0 incremental file in order to perform a
# level 1, effective differential backup each run.
if [ -f /mnt/$bckupdir/backup.snar -a -r /mnt/$bckupdir/backup.snar \
	-a -w /mnt/$bckupdir/backup.snar ]
then
	cp /mnt/$bckupdir/backup.snar $snarpath
	std_cmd_err_handler $?
else
	script_exit_code=66
	output "backup.snar does not exist or is not accessible. Exit code "$script_exit_code 1
	script_exit
fi

# Get list of sockets to exclude
find / -type s > /mnt/$bckupdir/sockets.exclude

# Run the backup excluding system directories
case $osname in
FreeBSD)
	gtar cpzf $backpath --listed-incremental=$snarpath \
		--exclude-from=$etclocation/bcksystem.exclude \
		--exclude-from=$etclocation/bckincdaily.exclude \
		--exclude-from=/mnt/$bckupdir/sockets.exclude \
		--exclude-caches /
	status=$?
;;
Linux)
	tar cpzf $backpath --listed-incremental=$snarpath \
		--exclude-from=$etclocation/bcksystem.exclude \
		--exclude-from=$etclocation/bckincdaily.exclude \
		--exclude-from=/mnt/$bckupdir/sockets.exclude \
		--exclude-caches /
	status=$?
;;
esac

# Final log entries and restore stdout & stderr
date
date 1>&2
output "Processing of "$backpath" is complete. Status: "$status 0
echo "Processing of "$backpath" is complete. Status: "$status 1>&2

##################################################################
## It is not clear why the following two lines cause everything ##
## to hang until charybdis is restarted. It is probably due to  ##
## the odd wiring relating to the kvm which powers off if	##
## charybdis or scylla are not powered up. So this only affects	##
## priam during EOD backup routines which shutdown machines on	##
## completion. So until fixed test on OS.			##
##################################################################
if [ $osname == "FreeBSD" ]
then
	df -ah # Log disk stats
	ls -lht /mnt/$bckupdir
fi

# Mail disk stats
df -ah | mailx -s "$script_short_desc" $mail_recipient

# Mail backup file date hierarchy
ls -lht /mnt/$bckupdir | mailx -s "$script_short_desc" $mail_recipient

exec 1>&6 2>&7 6>&- 7>&- # Restore stdout & stderr & close fd's 6 & 7

# Cleanup logs so they only have 1000 lines max
tail -n 1000 /mnt/$bckupdir/backup.log > /mnt/$bckupdir/tmp.log
std_cmd_err_handler $?
sleep 5
rm /mnt/$bckupdir/backup.log
std_cmd_err_handler $?
sleep 5
mv /mnt/$bckupdir/tmp.log /mnt/$bckupdir/backup.log
std_cmd_err_handler $?
sleep 5
tail -n 1000 /mnt/$bckupdir/backuperror.log > /mnt/$bckupdir/tmp.log
std_cmd_err_handler $?
sleep 5
rm /mnt/$bckupdir/backuperror.log
std_cmd_err_handler $?
sleep 5
mv /mnt/$bckupdir/tmp.log /mnt/$bckupdir/backuperror.log
std_cmd_err_handler $?
sleep 5

# And exit
script_exit_code=0
output "Daily Incremental Backup Complete." 0
script_exit

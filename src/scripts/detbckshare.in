#! /usr/bin/env bash
##########################################################################
##									##
##	detbckshare is automatically generated,				##
##		please do not modify!					##
##									##
##########################################################################

##########################################################################
##									##
## Script ID: detbckshare						##
## Author: Mark Grant							##
##									##
## Purpose:								##
## To unmount the backup share on the NAS server. E.g.			##
##	/mnt/mybackupdirectory						##
##	from								##
## 	\\MyServer\mybackupdirectory					##
##									##
## Syntax:	detbckshare [-h --help || -v --verbose || -V --version ]##
##									##
## Exit Codes:	0 & 64 - 113 as per C/C++ standard			##
##		0 - success						##
##		64 - Invalid arguments					##
##		65 - Failed to unmount backup NAS server		##
##		66 - Backup share not mounted				##
##		67 - trap received					##
##									##
## Further info:							##
## This script is part of the portable backup package.			##
##									##
##									##
##########################################################################

##########################################################################
##									##
## Changelog								##
##									##
## Date		Author	Version	Description				##
##									##
## 09/04/2010	MG	1.0.1	Created for Linux.			##
## 26/08/2010	MG	1.0.2	Revised to support FreeBSD as well as	##
##				Linux. Also, backup variables		##
##				introduced at beginning of script to	##
##				enhance portability. (E.g. System,	##
##				backup user etc.).			##
## 18/11/2010	MG	1.0.3	Changed to emit help and version on	##
##				input of correct flag as argument. Also	##
##				stored version in string in Init section##
## 28/11/2010	MG	1.0.4	Changed script to read parameters from	##
##				etclocation/backups.conf.		##
## 10/01/2012	MG	1.0.5	Removed the .sh extension from the	##
##				command name.				##
## 05/11/2012	MG	1.0.6	Reverted to .sh file extension.		##
## 26/02/2013	MG	1.0.7	Changed command line option processing	##
##				to use getopts.				##
## 01/04/2013	MG	1.0.8	Moved config files to new backups	##
##				directory under sysconfdir. Added	##
##				exclude files for system, weekly, daily	##
##				and data.				##
## 22/08/2013	MG	1.0.9	Debian best practice documentation	##
##				requires that programs placed in the	##
##				PATH should not have extensions as the	##
##				programs may be rewritten in a		##
##				different language. This would then	##
##				require a name change, or, if left	##
##				as-is would cause confusion. So name	##
##				changed to remove .sh extension.	##
## 06/01/2014	MG	1.1.1	Changed stdout & stderr message output	##
##				to use a function directing to one or	##
##				other based on a status. Changed	##
##				version option to -V. Added verbose	##
##				option -v.				##
## 22/11/2014	MG	1.1.2	Add overall package version to -V.	##
## 22/11/2014	MG	1.1.3	Switched from getopts to GNU getopt to	##
##				allow long options.			##
## 03/02/2015	MG	1.1.4	Remove BSD support.			##
##									##
##########################################################################

####################
## Init variables ##
####################
script_exit_code=0
outputprefix="detbckshare: "
version="1.1.4"				# set version variable
etclocation=@sysconfdir@/backups	# Path to etc directory
verbosity=""
packageversion=@pkgversion@		# Version of the complete package

###############
## Functions ##
###############

# Output $1 to stdout or stderr depending on $2
output()
{
	if [ $2 = 0 ]
	then
		if [ "$verbosity" = "-v" ]
		then
			echo "$outputprefix$1"
		fi
	else
		echo "$outputprefix$1" 1>&2
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]
	then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to tidy up and return exit code
script_exit()
{
	exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=67
output "Script terminating due to trap received. Code: "$script_exit_code 1
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

##########
## Main ##
##########
# Process command line arguments with GNU getopt.
GETOPTTEMP=`getopt -o hvV --long help,verbose,version -n "$0" -- "$@"`
std_cmd_err_handler $?

eval set -- "$GETOPTTEMP"
std_cmd_err_handler $?

while true
do
	case "$1" in
	-h|--help)
		echo "Usage is $0 [options]"
		echo "	-h or --help displays usage information"
		echo "	OR"
		echo "	-v or --verbose verbose output"
		echo "	OR"
		echo "	-V or --version displays version information"
		shift
		script_exit_code=0
		script_exit
		;;
	-v|--verbose)
		verbosity="-v"
		shift
		;;
	-V|--version)
		echo "$0 Script version "$version
		echo "$0 Package version "$packageversion
		shift
		script_exit_code=0
		script_exit
		;;
	--)	shift
		break
		;;
	*)	script_exit_code=1
		output "Internal error." 1
		script_exit
		;;
	esac
done

# Script does not accept other arguments.
if [ $# -gt 0 ]
then
	script_exit_code=64
	output "Invalid argument." 1
	script_exit
fi

# Read parameters from $etclocation/backups.conf
IFS="="

exec 3<$etclocation/backups.conf
while read -u3 -ra input
do
	case ${input[0]} in
	dir)
		bckupdir=${input[1]}
		;;
	esac
done
exec 3<&-

# Check to see if the NAS backup server is mounted, if it is, unmount
if [ "$(chkbckshare -bt)" = "TRUE" ]
then
	umount /mnt/$bckupdir
	status=$?
	if [ $status != 0 ]
	then
		script_exit_code=65
		output "Failed to unmount backup NAS server. Umount error: "$status" Script exit code: "$script_exit_code 1
		script_exit
	fi
else
	script_exit_code=66
	output "Backup share not mounted. Script exit code: "$script_exit_code 1
	script_exit
fi

script_exit_code=0
output "Share unmounted from /mnt/$bckupdir" 0
script_exit

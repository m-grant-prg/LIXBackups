#! @bashlocation@
#########################################################################
#									#
#	chkbckshare is automatically generated,				#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: chkbckshare						#
# Author: Copyright (C) 2013-2019  Mark Grant				#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0					#
#									#
# Purpose:								#
# To check if the backup share is mounted . E.g.			#
# 	\\Ambrosia\charybdisbck or hermes:/srv/backups/charybdis	#
# 	on								#
# 	/mnt/charybdisbck						#
#									#
# Syntax:	chkbckshare [-b or --boolean || -h or --help ||		#
#				-t or --terse || -V or --version]	#
#									#
# Exit Codes:	0 - success						#
#		1 - failure						#
#									#
# Further Info:								#
# This script checks if a share is mounted as a target for the		#
# backup scripts.							#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 21/12/2013	MG	1.1.1	First release.				#
# 22/11/2014	MG	1.1.2	Add overall package version to -V.	#
# 22/11/2014	MG	1.1.3	Switched from getopts to GNU getopt to	#
#				allow long options.			#
# 02/02/2015	MG	1.1.4	Remove BSD support.			#
# 02/02/2015	MG	1.2.1	Add support for NFS shares. Add support	#
#				for different share targets for weekly	#
#				and adhoc backups.			#
# 24/02/2015	MG	1.2.2	Change configuration files directory to	#
#				lixbackups to limit risk of conflict	#
#				with other backup packages.		#
# 20/06/2017	MG	1.2.3	Ensure script respects the 80 column	#
#				rule.					#
# 30/11/2017	MG	1.2.4	Add SPDX license tags to source files.	#
# 03/12/2017	MG	1.2.5	Adopt normal exit code policy; 0 on	#
#				success, 1 on failure.			#
# 09/01/2019	MG	1.2.6	Use absolute bash path in shebang	#
#				instead of env. Using env is OK for a 	#
#				non-AutoTools script.			#
# 20/01/2019	MG	1.2.7	Do not hard code outputprefix contents.	#
#				Use true booleans.			#
#				Standardise output function.		#
#				Remove script_exit_code variable.	#
#				Improve trap function.			#
#				Use [[ ... ]] when appropriate.		#
#				Refactor into functions.		#
#									#
#########################################################################

##################
# Init variables #
##################
outputprefix="$(basename $0):"
mountoutput=""
version=1.2.7				# set version variable
etclocation=@sysconfdir@/lixbackups	# Path to etc directory
packageversion=@pkgversion@		# Version of the complete package

bool=false
terse=false
mntdir=""

#############
# Functions #
#############

# -h --help output.
# No parameters
# No return value
usage()
{
cat << EOF
Usage is $0 [options]
	-b or --boolean displays TRUE or FALSE instead of mount information
	OR
	-h or --help displays usage information
	OR
	-t or --terse removes prepending script name from the output
	OR
	-V or --version displays version information
EOF
}

# Standard function to emit messages depending on various parameters.
# Parameters -	$1 What:-	The message to emit.
#		$2 Where:-	stdout == 0
#				stderr == 1
# No return value.
output()
{
	if [ $2 = 0 ]; then
		printf "%s %s\n" $outputprefix "$1"
	else
		printf "%s %s\n" $outputprefix "$1" 1>&2
	fi
}

# Standard function to test command error and exit if non-zero.
# Parameters - $1 is $?
# No return value.
std_cmd_err_handler()
{
	if [ $1 != 0 ]; then
		script_exit $1
	fi
}

# Standard function to tidy up and return exit code.
# Parameters - 	$1 is the exit code.
# No return value.
script_exit()
{
	exit $1
}

# Standard trap exit function.
# No parameters.
# No return value.
trap_exit()
{
	local exit_code=$?
	local msg

	msg="Script terminating with exit code $exit_code due to trap received."
	output "$msg" 1 0
	script_exit $exit_code
}

# Process command line arguments with GNU getopt.
# Parameters -	$1 is the command line.
# No return value.
proc_CL()
{
	local GETOPTTEMP

	GETOPTTEMP="getopt -o bhtV --long boolean,help,terse,version"
	GETOPTTEMP=`$GETOPTTEMP -n "$0" -- "$@"`
	std_cmd_err_handler $?

	eval set -- "$GETOPTTEMP"
	std_cmd_err_handler $?

	while true; do
		case "$1" in
		-b|--boolean)
			bool=true
			shift
			;;
		-h|--help)
			usage
			shift
			script_exit 0
			;;
		-t|--terse)
			terse=true
			outputprefix=""
			shift
			;;
		-V|--version)
			echo "$0 Script version "$version
			echo "$0 Package version "$packageversion
			shift
			script_exit 0
			;;
		--)	shift
			break
			;;
		*)	output "Internal error." 1
			script_exit 1
			;;
		esac
	done

	# Script does not accept other arguments.
	if [[ $# > 0 ]]; then
		output "Invalid argument." 1
		script_exit 1
	fi
}

# Process the config file just looking for mntdir.
# Parameters - None
# No return value.
proc_config_file()
{
	local input=()
	local msg
	local oldIFS=$IFS

	if [[ ! -f $etclocation/backups.conf \
		|| ! -r $etclocation/backups.conf ]]; then
		msg="Config file $etclocation/backups.conf does not exist, is "
		msg+="not a regular file or is not readable."
		output "$msg" 1
		script_exit 66
	fi

	IFS="="

	exec 3<$etclocation/backups.conf
	while read -u3 -ra input; do
		case ${input[0]} in
		mntdir)
			mntdir=${input[1]}
			;;
		esac
	done
	exec 3<&-

	IFS=$oldIFS
}


########
# Main #
########

# Setup trap.
trap trap_exit SIGHUP SIGINT SIGQUIT SIGTERM

proc_CL "$@"

proc_config_file

# Check to see if the backup share is mounted
mountoutput=$(mount | grep "$mntdir")
if $bool ; then
	if [[ $mountoutput ]]; then
		output "TRUE" 0
	else
		output "FALSE" 0
	fi
else
	if [[ $mountoutput ]]; then
		output $mountoutput 0
	else
		output "Backup share not mounted" 0
	fi
fi

script_exit 0


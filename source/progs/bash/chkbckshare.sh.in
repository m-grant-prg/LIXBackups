#! /usr/bin/env bash
#########################################################################
#									#
#	chkbckshare is automatically generated,				#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: chkbckshare						#
# Author: Mark Grant							#
#									#
# Purpose:								#
# To check if the backup share is mounted . E.g.			#
# 	\\Ambrosia\charybdisbck or hermes:/srv/backups/charybdis	#					#
# 	on								#
# 	/mnt/charybdisbck						#
#									#
# Syntax:	chkbckshare [-b or --boolean || -h or --help ||		#
#				-t or --terse || -V or --version]	#
#									#
# Exit Codes:	0 & 64 - 113 as per C/C++ standard			#
#		0 - success						#
#		64 - Invalid arguments					#
#		67 - trap received					#
#									#
# Further Info:								#
# This script checks if a share is mounted as a target for the		#
# backup scripts.							#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 21/12/2013	MG	1.1.1	First release.				#
# 22/11/2014	MG	1.1.2	Add overall package version to -V.	#
# 22/11/2014	MG	1.1.3	Switched from getopts to GNU getopt to	#
#				allow long options.			#
# 02/02/2015	MG	1.1.4	Remove BSD support.			#
# 02/02/2015	MG	1.2.1	Add support for NFS shares. Add support	#
#				for different share targets for weekly	#
#				and adhoc backups.			#
# 24/02/2015	MG	1.2.2	Change configuration files directory to	#
#				lixbackups to limit risk of conflict	#
#				with other backup packages.		#
# 20/06/2017	MG	1.2.3	Ensure script respects the 80 column	#
#				rule.					#
#									#
#########################################################################

##################
# Init variables #
##################
bool="FALSE"
terse="FALSE"
outputprefix="chkbckshare: "
mountoutput=""
script_exit_code=0
version="1.2.3"				# set version variable
etclocation=@sysconfdir@/lixbackups	# Path to etc directory
packageversion=@pkgversion@		# Version of the complete package

mntdir=""

#############
# Functions #
#############

# Output $1 to stdout or stderr depending on $2
output()
{
	if [ $2 = 0 ]
	then
		echo "$outputprefix$1"
	else
		echo "$outputprefix$1" 1>&2
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]
	then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to tidy up and return exit code
script_exit()
{
	exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=67
output "Script terminating due to trap received. Code: "$script_exit_code 1
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

########
# Main #
########
# Process command line arguments with GNU getopt.
GETOPTTEMP=`getopt -o bhtV --long boolean,help,terse,version -n "$0" -- "$@"`
std_cmd_err_handler $?

eval set -- "$GETOPTTEMP"
std_cmd_err_handler $?

while true
do
	case "$1" in
	-b|--boolean)
		bool="TRUE"
		shift
		;;
	-h|--help)
		echo "Usage is $0 [options]"
		msg="	-b or --boolean displays TRUE or FALSE instead of "
		msg+="mount information"
		echo "$msg"
		echo "	OR"
		echo "	-h or --help displays usage information"
		echo "	OR"
		msg="	-t or --terse removes prepending script name from the "
		msg+="output"
		echo "$msg"
		echo "	OR"
		echo "	-V or --version displays version information"
		shift
		script_exit_code=0
		script_exit
		;;
	-t|--terse)
		terse="TRUE"
		outputprefix=""
		shift
		;;
	-V|--version)
		echo "$0 Script version "$version
		echo "$0 Package version "$packageversion
		shift
		script_exit_code=0
		script_exit
		;;
	--)	shift
		break
		;;
	*)	script_exit_code=1
		output "Internal error." 1
		script_exit
		;;
	esac
done

# Script does not accept other arguments.
if [ $# -gt 0 ]
then
	script_exit_code=64
	output "Invalid argument." 1
	script_exit
fi

# Read parameters from $etclocation/backups.conf
IFS="="

exec 3<$etclocation/backups.conf
while read -u3 -ra input
do
	case ${input[0]} in
	mntdir)
		mntdir=${input[1]}
		;;
	esac
done
exec 3<&-

# Check to see if the backup share is mounted
mountoutput=$(mount | grep "$mntdir")
if [ "$bool" = "FALSE" ]
then
	if [ "$mountoutput" = "" ]
	then
		output "Backup share not mounted" 0
	else
		output $mountoutput 0
	fi
else
	if [ "$mountoutput" = "" ]
	then
		output "FALSE" 0
	else
		output "TRUE" 0
	fi
fi

script_exit_code=0
script_exit

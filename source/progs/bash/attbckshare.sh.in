#! /usr/bin/env bash
#########################################################################
#									#
#	attbckshare is automatically generated,				#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: attbckshare						#
# Author: Mark Grant							#
#									#
# Purpose:								#
# To mount a CIFS or NFS backup share. E.g.				#
# 	\\Ambrosia\charybdisbck or hermes:/srv/backups/charybdis	#
# 	on								#
# 	/mnt/charybdisbck						#
#									#
# Syntax:	attbckshare [ -a --adhoc || -h --help || -v --verbose	#
#				|| -V --version || -w --weekly ]	#
#									#
# Exit Codes:	0 & 64 - 113 as per C/C++ standard			#
#		0 - success						#
#		64 - Invalid arguments					#
#		65 - Failed mounting backup share			#
#		66 - Backup share already mounted			#
#		67 - trap received					#
#									#
# Further Info:								#
# This script mounts a CIFS or NFS share as a target for the backup	#
# scripts.								#
#									#
# In order to make the package portable all the necessary parameters	#
# are stored in a $PREFIX/etc/lixbackups/backups.conf file.		#
# For further information please consult the backups.conf man page.	#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 09/04/2010	MG	1.0.1	Created for Linux.			#
# 26/08/2010	MG	1.0.2	Major revision completed supporting	#
#				FreeBSD as well as Linux. Also put all	#
#				relevant parameters in variables at	#
#				beginning of script to enhance		#
#				portability. (e.g. System, backup user	#
#				etc.).					#
# 18/11/2010	MG	1.0.3	Changed to emit help and version on	#
#				input of correct flag as argument. Also	#
#				stored version in string in Init section#
# 28/11/2010	MG	1.0.4	Changed script to read parameters from	#
#				etclocation/backups.conf and, when	#
#				necessary (FreeBSD), the ~/.nsmbrc file.#
# 10/01/2012	MG	1.0.5	Removed the .sh extension from the	#
#				command name.				#
# 05/11/2012	MG	1.0.6	Reverted to the .sh file extension.	#
# 26/02/2013	MG	1.0.7	Changed command line option processing	#
#				to use getopts.				#
# 01/04/2013	MG	1.0.8	Moved config files to new backups	#
#				directory under sysconfdir. Added	#
#				exclude files for system, weekly, daily	#
#				and data.				#
# 22/08/2013	MG	1.0.9	Debian best practice documentation	#
#				requires that programs placed in the	#
#				PATH should not have extensions as the	#
#				programs may be rewritten in a		#
#				different language. This would then	#
#				require a name change, or, if left	#
#				as-is would cause confusion. So name	#
#				changed to remove .sh extension.	#
# 06/01/2014	MG	1.1.1	Changed stdout & stderr message output	#
#				to use a function directing to one or	#
#				other based on a status. Changed	#
#				version option to -V. Added verbose	#
#				option -v.				#
# 16/11/2014	MG	1.1.2	Switched from getopts to GNU getopt to	#
#				allow long options.			#
# 17/11/2014	MG	1.1.3	Change FreeBSD specifics to *BSD and	#
#				change Linux to be the default.		#
# 22/11/2014	MG	1.1.4	Add overall package version to -V.	#
# 02/02/2015	MG	1.1.5	Remove BSD support.			#
# 02/02/2015	MG	1.2.1	Add support for NFS shares. Add support	#
#				for different weekly and ad hoc targets.#
# 24/02/2015	MG	1.2.2	Change configuration files directory to	#
#				lixbackups to limit risk of conflict	#
#				with other backup packages.		#
# 26/02/2015	MG	1.2.3	Use logger to write key messages to	#
#				syslog.					#
# 19/06/2017	MG	1.2.4	Ensure script respects the 80 column	#
#				rule.					#
# 07/09/2017	MG	1.2.5	As of kernel version 4.13.0 the default	#
#				CIFS protocol version has been changed	#
#				from 1.0 to 3.0. However, some old NAS	#
#				devices may well still only know 1.0.	#
#				So introduce a config file param for	#
#				cifs version. If left blank the the	#
#				system default will be used.		#
#									#
#########################################################################

##################
# Init variables #
##################
script_exit_code=0
outputprefix="attbckshare: "
version="1.2.5"				# set version variable
etclocation=@sysconfdir@/lixbackups	# Path to etc directory
packageversion=@pkgversion@		# Version of the complete package

verbosity=""
adhoc=FALSE
weekly=FALSE
weeklytype=""
weeklytarget=""
weeklycredfile=""
weeklynotifyuser=""
adhoctype=""
adhoctarget=""
adhoccredfile=""
adhocnotifyuser=""
cifsversion=""
mntdir=""
bckuptype=""

#############
# Functions #
#############

# Output $1 to stdout or stderr depending on $2 and write to syslog if required.
# Syntax = output $1 (The message) $2 (0 = stdout, > 0 = stderr)
# $3 (TRUE = syslog it).
output()
{
	if [ $2 = 0 ]
	then
		if [ "$verbosity" = "-v" ]
		then
			echo "$outputprefix$1"
		fi
	else
		echo "$outputprefix$1" 1>&2
	fi
	if [ $3 = TRUE ]
	then
		logger "$outputprefix$1"
		std_cmd_err_handler $?
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]
	then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to tidy up and return exit code
script_exit()
{
	exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=67
output "Script terminating due to trap received. Code: "$script_exit_code 1 TRUE
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

########
# Main #
########
# Process command line arguments with GNU getopt.
GETOPTTEMP=`getopt -o ahvVw --long adhoc,help,verbose,version,weekly \
	-n "$0" -- "$@"`
std_cmd_err_handler $?

eval set -- "$GETOPTTEMP"
std_cmd_err_handler $?

while true
do
	case "$1" in
	-a|--adhoc)
		if [ $weekly = TRUE ]
		then
			script_exit_code=64
			output "Options a and w are mutually exclusive." 1 FALSE
			script_exit
		fi
		adhoc=TRUE
		bckuptype="adhoc"
		shift
		;;
	-h|--help)
		echo "Usage is $0 [options]"
		echo "	-a or --adhoc mount the ad hoc backup target share"
		echo "	OR"
		echo "	-h or --help displays usage information"
		echo "	OR"
		echo "	-v or --verbose verbose output"
		echo "	OR"
		echo "	-V or --version displays version information"
		echo "	OR"
		echo "	-w or --weekly mount the weekly target backup share"
		shift
		script_exit_code=0
		script_exit
		;;
	-v|--verbose)
		verbosity="-v"
		shift
		;;
	-V|--version)
		echo "$0 Script version "$version
		echo "$0 Package version "$packageversion
		shift
		script_exit_code=0
		script_exit
		;;
	-w|--weekly)
		if [ $adhoc = TRUE ]
		then
			script_exit_code=64
			output "Options a and w are mutually exclusive." 1 FALSE
			script_exit
		fi
		weekly=TRUE
		bckuptype="weekly"
		shift
		;;
	--)	shift
		break
		;;
	*)	script_exit_code=1
		output "Internal error." 1 FALSE
		script_exit
		;;
	esac
done

# Script does not accept other arguments.
if [ $# -gt 0 ]
then
	script_exit_code=64
	output "Invalid argument." 1 FALSE
	script_exit
fi

# One option has to be selected.
if [ $adhoc = FALSE -a $weekly = FALSE ]
then
	script_exit_code=64
	output "Either a or w must be set." 1 FALSE
	script_exit
fi

# Read parameters from $etclocation/backups.conf
IFS="="

exec 3<$etclocation/backups.conf
while read -u3 -ra input
do
	case ${input[0]} in
	weeklytype)
		weeklytype=${input[1]}
		;;
	weeklytarget)
		weeklytarget=${input[1]}
		;;
	weeklycredfile)
		weeklycredfile=${input[1]}
		;;
	weeklynotifyuser)
		weeklynotifyuser=${input[1]}
		;;
	adhoctype)
		adhoctype=${input[1]}
		;;
	adhoctarget)
		adhoctarget=${input[1]}
		;;
	adhoccredfile)
		adhoccredfile=${input[1]}
		;;
	adhocnotifyuser)
		adhocnotifyuser=${input[1]}
		;;
	cifsversion)
		cifsversion=${input[1]}
		;;
	mntdir)
		mntdir=${input[1]}
		;;
	esac
done
exec 3<&-

case $bckuptype in
adhoc)
	type=$adhoctype
	target=$adhoctarget
	credfile=$adhoccredfile
	notifyuser=$adhocnotifyuser
	;;
weekly)
	type=$weeklytype
	target=$weeklytarget
	credfile=$weeklycredfile
	notifyuser=$weeklynotifyuser
	;;
esac

mountCL="mount -t "
case $type in
NFS)
	mountCL=$mountCL"nfs $target $mntdir"
	;;
CIFS)
	mountCL=$mountCL"cifs -o credentials=$credfile $target $mntdir"
	if [ "$cifsversion" != "" ]
	then
		mountCL+=" -o vers=$cifsversion"
	fi
	;;
*)	script_exit_code=1
	output "Invalid share type." 1 TRUE
	script_exit
	;;
esac

# Check to see if the network backup share is mounted, if not, mount
if [ "$(chkbckshare -bt)" = "FALSE" ]
then
	eval "$mountCL"
	status=$?
	if [ $status != 0 ]
	then
		script_exit_code=65
		msg="Failed to mount backup share. Mount error: "$status
		msg+=" Script exit code: "$script_exit_code
		output $msg 1 TRUE
		script_exit
	fi
else
	script_exit_code=66
	msg="Backup share already mounted. Script exit code: "
	msg+=$script_exit_code
	output $msg 1 TRUE
	script_exit
fi

script_exit_code=0
output "Share $target mounted on $mntdir" 0 TRUE
script_exit

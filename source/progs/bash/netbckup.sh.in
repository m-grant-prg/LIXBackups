#! /usr/bin/env bash
#########################################################################
#									#
#	netbckup is automatically generated,				#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: netbckup							#
# Author: Copyright (C) 2012-2017  Mark Grant				#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0					#
#									#
# Purpose:								#
# Depending on command line arguments runs:-				#
#	a full ad hoc backup.						#
#	a level 0 --listed-incremental (ie full) backup of entire file	#
#		system. It allows for a cycle of 5 backups for weekly	#
#		coverage, designated by 1 - 5.				#
#	a level 1 --listed-incremental backup to produce a differential	#
#		backup.							#
#	a level 1 - n --listed-incremental backup to produce an		#
#		incremental backup.					#
#	a selective backup.						#
#                                                            	  	#
# Syntax:      netbckup [ -d or --differential || -f or --full ||	#
#			-h or --help || -i or --incremental ||		#
#			-s or --selective || -V or --version ||		#
#			-w or --weekly ]				#
#									#
# Exit Codes:	0 & 64 - 113 as per C/C++ standard			#
#		0 - success						#
#		64 - Invalid arguments					#
#		65 - Failed mounting backup network share		#
#		66 - backup.snar non-existent or inaccessible		#
#		67 - trap received					#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 24/09/2014	MG	1.0.1	Created from consolidation of separate	#
#				full, weekly, daily and data scripts.	#
# 28/09/2014	MG	1.0.2	Changed latency_compensate function to	#
#				attempt 1 execution of command without	#
#				causing a sleep.			#
# 30/09/2014	MG	1.0.3	If the root account is accessible, ('P'	#
#				from passwd -S), then deny login access	#
#				to non-root users for the duration of	#
#				the backup. If root is not accessible,	#
#				then do not deny access as it would be	#
#				dangerous if for some reason it is not	#
#				re-allowed. Only root would have access.#
#				(Even though shutdown clears the	#
#				restriction, this script does not	#
#				demand a shutdown).			#
# 22/11/2014	MG	1.0.4	Add overall package version to -V.	#
# 22/11/2014	MG	1.0.5	Switched from getopts to GNU getopt to	#
#				allow long options.			#
# 03/02/2015	MG	1.0.6	Remove BSD support.			#
# 03/02/2015	MG	1.2.1	Add support for NFS backup shares. Add	#
#				support for different backup share	#
#				targets for weekly and ad hoc type	#
#				backups. Remove latency_compensate	#
#				function as improved hardware or	#
#				removal of BSD has cured the problem.	#
# 24/02/2015	MG	1.2.2	Change configuration files directory to	#
#				lixbackups to limit risk of conflict	#
#				with other backup packages.		#
# 26/02/2015	MG	1.2.3	Use logger to write key messages to	#
#				syslog.					#
# 01/03/2015	MG	1.2.4	Use log file in localstatedir/log. Log	#
#				file management set to use logrotate in	#
#				this package release.			#
# 16/03/2015	MG	1.2.5	Improve logging.			#
# 05/06/2015	MG	1.2.6	Reduce df output from df -ah to a more	#
#				sensible df -h.				#
# 18/06/2017	MG	1.2.7	With the introduction of GNU tar v1.29,	#
#				some command line arguments are		#
#				sensitive to the order in which they	#
#				appear. In our case excludes must	#
#				precede includes.			#
# 20/06/2017	MG	1.2.8	Ensure script respects the 80 column	#
#				rule.					#
# 30/06/2017	MG	1.2.9	Add --format=posix to the tar command	#
#				to avoid the 99 character file name	#
#				limitation.				#
# 16/08/2017	MG	1.2.10	If lixbackups.log does not exist create	#
#				with root:adm ownership instead of	#
#				syslog:adm as Debian does not have a	#
#				syslog user.				#
# 30/11/2017	MG	1.2.11	Add SPDX license tags to source files.	#
#									#
#########################################################################

##################
# Init variables #
##################
script_exit_code=0
version="1.2.11"			# set version variable
etclocation=@sysconfdir@/lixbackups	# Path to etc directory
outputprefix="netbckup: "
differential=FALSE
fulladhoc=FALSE
incremental=FALSE
selective=FALSE
weekly=FALSE
bckuptype=""				# Selected backup type
bckupCL=""				# Backup command line
packageversion=@pkgversion@		# Version of the complete package
weeklynotifyuser=""
adhocnotifyuser=""
notifyuser=""
attachtype=""				# attbckshare  weekly or adhoc
loglocation=@localstatedir@/log		# Log file location

#############
# Functions #
#############

# Output $1 to stdout or stderr depending on $2 and write to syslog if required.
# Syntax = output $1 (The message) $2 (0 = stdout, > 0 = stderr)
# $3 (TRUE = syslog it).
output()
{
	if [ $2 = 0 ]
	then
		echo $(date +'[ %a %b %d %T ]')" $outputprefix$1"
	else
		echo $(date +'[ %a %b %d %T ]')" $outputprefix$1" 1>&2
	fi
	if [ $3 = TRUE ]
	then
		logger "$outputprefix$1"
		std_cmd_err_handler $?
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]
	then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to cleanup and return exit code
script_exit()
{
# The backup share might or might not be mounted.
if [ "$(chkbckshare -bt)" = "TRUE" ]
then
	detbckshare
	# No error check cos could loop via std_cmd_err_handler
fi

# FD's 6 & 7 may or may not be open at this point so test individually for
# closing. This reads lsof with ANDed conditions of suppress warnings, FD 6,
# output only FD for this current PID and pipe it's output to wc to count the
# lines. If FD 6 is open, 2 lines result, PID number and f6.
if [ $(lsof -aw -d 6 -F f -p $$ | wc -l) -gt 0 ]
then
	# Final log entries and restore stdout & stderr
	output $script_short_desc" completed with status $script_exit_code" \
		$script_exit_code FALSE
	msg="Processing of "$backpath" is complete. Status: "
	msg+="$script_exit_code"
	output "$msg" $script_exit_code FALSE

	exec 1>&6 6>&-	# Restore stdout and close FD 6
fi
if [ $(lsof -aw -d 7 -F f -p $$ | wc -l) -gt 0 ]
then
	exec 2>&7 7>&-	# Restore stderr and close FD 7
fi

# Re-Allow logins
rm -f /etc/nologin

output $script_short_desc" completed with status "$script_exit_code \
	$script_exit_code TRUE

exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=67
output "Script terminating due to trap received." 1 TRUE
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

########
# Main #
########
# Process command line arguments with GNU getopt.
GETOPTTEMP=`getopt -o dfhisVw \
	--long differential,full,help,incremental,selective,version,weekly \
	-n "$0" -- "$@"`
status=$?
if [ $status != 0 ]
then
	exit $status
fi

eval set -- "$GETOPTTEMP"
status=$?
if [ $status != 0 ]
then
	exit $status
fi

while true
do
	case "$1" in
	-d|--differential)
		if [ $fulladhoc = TRUE -o $incremental = TRUE \
			-o $selective = TRUE -o $weekly = TRUE ]
		then
			msg="Options d, f, i, s and w are all mutually "
			msg+="exclusive."
			output "$msg" 64 FALSE
			exit 64
		fi
		differential=TRUE
		bckuptype="differential"
		attachtype="weekly"
		script_short_desc=$(uname -n)" "$(date +%A)
		script_short_desc+=" Daily Differential Backup"
		shift
		;;
	-f|--full)
		if [ $differential = TRUE -o $incremental = TRUE \
			-o $selective = TRUE -o $weekly = TRUE ]
		then
			msg="Options d, f, i, s and w are all mutually "
			msg+="exclusive."
			output "$msg" 64 FALSE
			exit 64
		fi
		fulladhoc=TRUE
		bckuptype="fulladhoc"
		attachtype="adhoc"
		script_short_desc=$(uname -n)" Ad Hoc Full Backup "
		script_short_desc+=$(date '+%Y%m%d%H%M')
		shift
		;;
	-h|--help)
		echo "Usage is $0 [options]"
		echo "	-d or --differential - perform a differential backup"
		echo "	-f or --full - perform a full ad hoc backup"
		echo "	-h or --help displays usage information"
		echo "	-i or --incremental - perform an incremental backup"
		echo "	-s or --selective - perform a selective backup"
		echo "	-V or --version displays version information"
		echo "	OR"
		echo "	-w or --weekly - perform a weekly full backup"
		shift
		exit 0
		;;
	-i|--incremental)
		if [ $fulladhoc = TRUE -o $differential = TRUE \
			-o $selective = TRUE -o $weekly = TRUE ]
		then
			msg="Options d, f, i, s and w are all mutually "
			msg+="exclusive."
			output "$msg" 64 FALSE
			exit 64
		fi
		incremental=TRUE
		bckuptype="incremental"
		attachtype="weekly"
		script_short_desc=$(uname -n)" "$(date +%A)
		script_short_desc+=" Daily Incremental Backup"
		shift
		;;
	-s|--selective)
		if [ $fulladhoc = TRUE -o $differential = TRUE \
			-o $incremental = TRUE -o $weekly = TRUE ]
		then
			msg="Options d, f, i, s and w are all mutually "
			msg+="exclusive."
			output "$msg" 64 FALSE
			exit 64
		fi
		selective=TRUE
		bckuptype="selective"
		attachtype="adhoc"
		script_short_desc=$(uname -n)" "$(date +%A)" Selective Backup"
		shift
		;;
	-V|--version)	echo "$0 Script version "$version
		echo "$0 Package version "$packageversion
		shift
		exit 0
		;;
	-w|--weekly)
		if [ $fulladhoc = TRUE -o $differential = TRUE \
			-o $incremental = TRUE -o $selective = TRUE ]
		then
			msg="Options d, f, i, s and w are all mutually "
			msg+="exclusive."
			output "$msg" 64 FALSE
			exit 64
		fi
		weekly=TRUE
		bckuptype="weekly"
		attachtype="weekly"
		# Calculate backup sequence number.
		# Remove leading zeros otherwise thinks it is octal
		day=$(date +%d)
		day=$(echo $day | sed 's/^0*//')
		bckseq=1
		if [ $day -gt 28 ]; then
			bckseq=5
			elif [ $day -gt 21 ] ; then
				bckseq=4
				elif [ $day -gt 14 ] ; then
					bckseq=3
					elif [ $day -gt 7 ] ; then
						bckseq=2
		fi
		script_short_desc=$(uname -n)" Weekly Full Backup - "$bckseq
		shift
		;;
	--)	shift
		break
		;;
	*)	output "Internal error." 1 FALSE
		exit 1
		;;
	esac
done

# Script does not accept other arguments.
if [ $# -gt 0 ]
then
	output "Invalid argument." 64 FALSE
	exit 64
fi

# One option has to be selected.
if [ $differential = FALSE -a $fulladhoc = FALSE -a $incremental = FALSE \
	-a $selective = FALSE -a $weekly = FALSE ]
then
	output "Either d, f, i, s or w must be set." 64 FALSE
	exit 64
fi

output "Refer to $loglocation/lixbackups.log for further information." 0 TRUE
output "$script_short_desc" 0 TRUE

# Ensure backup log exists.
mkdir -p $loglocation
if [ ! -f $loglocation/lixbackups.log ]
then
	touch $loglocation/lixbackups.log
	std_cmd_err_handler $?
	chown root:adm $loglocation/lixbackups.log
	std_cmd_err_handler $?
	chmod 0640 $loglocation/lixbackups.log
	std_cmd_err_handler $?
fi

# Make copies of stdout & stderr then re-direct stdout & stderr to backup log
# and write initial entries
exec 6>&1 7>&2

exec 1>> $loglocation/lixbackups.log 2>&1

output "$script_short_desc" 0 FALSE

# Check to see if root account is accessible, if so, prohibit non-root login
pwdstatus=$(passwd -Sa | awk '{ if ($1 == "root")
		print $2 ;}')

if [ $pwdstatus = "P" ]
then
	msg="Root password status is "$pwdstatus". Denying non-root login "
	msg+="access."
	output "$msg" 0 TRUE
	echo "Login refused. Backup in progress." > /etc/nologin
else
	msg="Root password status is "$pwdstatus". Login access not being "
	msg+="denied."
	output "$msg" 0 TRUE
fi

# Read parameters from $etclocation/backups.conf
IFS="="

exec 3<$etclocation/backups.conf
while read -u3 -ra input
do
	case ${input[0]} in
	mntdir)
		mntdir=${input[1]}
		;;
	weeklynotifyuser)
		weeklynotifyuser=${input[1]}
		;;
	adhocnotifyuser)
		adhocnotifyuser=${input[1]}
		;;
	esac
done
exec 3<&-

if [ $attachtype = "weekly" ]
then
	notifyuser=$weeklynotifyuser
else
	notifyuser=$adhocnotifyuser
fi

# Check to see if the network backup share is mounted, if so umount as it could
# be mounted using different parameters, then mount
if [ "$(chkbckshare -bt)" = "TRUE" ]
then
	detbckshare
	std_cmd_err_handler $?
fi
attbckshare --$attachtype --verbose
std_cmd_err_handler $?

# Start build of backup command
bckupCL="tar -cpz --format=posix -f "


case $bckuptype in
differential)
	# Build the backup & incremental file names and paths
	backpath="$mntdir/backup"$(date +%a)".tar.gz"
	snarpath="$mntdir/backup"$(date +%a)".snar"

	# If the incremental files exists, delete.
	# (Just in case full backup has not done this)
	if [ -f $snarpath ] ; then
		rm $snarpath
		std_cmd_err_handler $?
	fi

	# Copy level 0 incremental file in order to perform a
	# level 1, effective differential backup each run.
	if [ -f $mntdir/backup.snar -a -r $mntdir/backup.snar \
		-a -w $mntdir/backup.snar ] ; then
		cp $mntdir/backup.snar $snarpath
		std_cmd_err_handler $?
	else
		script_exit_code=66
		msg="backup.snar does not exist or is not accessible. Exit "
		msg+="code "$script_exit_code
		output "$msg" 1 TRUE
		script_exit
	fi

	bckupCL+="$backpath --exclude-from=$etclocation/bckdaily.exclude "
	# Exclude system and cache directories
	bckupCL+="--exclude-from=$etclocation/bcksystem.exclude "
	bckupCL+="--exclude-from=$mntdir/sockets.exclude "
	bckupCL+="--exclude-caches "
	bckupCL+="--listed-incremental=$snarpath "
	;;
fulladhoc)
	# Build the backup file name and path
	backpath="$mntdir/backup"$(date '+%Y%m%d%H%M')".tar.gz"

	bckupCL+="$backpath "
	# Exclude system and cache directories
	bckupCL+="--exclude-from=$etclocation/bcksystem.exclude "
	bckupCL+="--exclude-from=$mntdir/sockets.exclude "
	bckupCL+="--exclude-caches "
	;;
incremental)
	# Build the backup & incremental file names and paths
	backpath="$mntdir/backup"$(date +%a)".tar.gz"
	snarpath="$mntdir/backup.snar"

	# Check that the incremental file exists.
	if [ ! -f $snarpath -o ! -r $snarpath -o ! -w $snarpath ] ; then
		script_exit_code=66
		msg=$snarpath" does not exist or is not accessible. Exit "
		msg+="code "$script_exit_code
		output "$msg" 1 TRUE
		script_exit
	fi

	bckupCL+="$backpath --exclude-from=$etclocation/bckdaily.exclude "
	# Exclude system and cache directories
	bckupCL+="--exclude-from=$etclocation/bcksystem.exclude "
	bckupCL+="--exclude-from=$mntdir/sockets.exclude "
	bckupCL+="--exclude-caches "
	bckupCL+="--listed-incremental=$snarpath "
	;;
selective)
	# Build the backup file name and path
	backpath="$mntdir/backupsel"$(date +%a)".tar.gz"

	bckupCL+="$backpath --exclude-from=$etclocation/bckseldaily.exclude "
	# Exclude system and cache directories
	bckupCL+="--exclude-from=$etclocation/bcksystem.exclude "
	bckupCL+="--exclude-from=$mntdir/sockets.exclude "
	bckupCL+="--exclude-caches "
	bckupCL+="--files-from=$etclocation/bckseldaily.files "
	;;
weekly)
	# Build the backup & incremental file names and paths
	backpath="$mntdir/backup"$bckseq".tar.gz"
	snarpath="$mntdir/backup.snar"

	# If the level 0 incremental file exists, delete
	if [ -f $snarpath ]
	then
		rm $snarpath
		std_cmd_err_handler $?
	fi

	bckupCL+="$backpath --exclude-from=$etclocation/bckweekly.exclude "
	# Exclude system and cache directories
	bckupCL+="--exclude-from=$etclocation/bcksystem.exclude "
	bckupCL+="--exclude-from=$mntdir/sockets.exclude "
	bckupCL+="--exclude-caches "
	bckupCL+="--listed-incremental=$snarpath "
	;;
esac

# If the backup file exists, delete
if [ -f $backpath ]
then
	rm $backpath
	std_cmd_err_handler $?
fi

output "Attempting to process backup - "$backpath 0 TRUE

# Empty the network trashbox if it exists
rm -fr $mntdir/trashbox/*
std_cmd_err_handler $?

# Produce list of sockets to exclude
# ignoring directories appearing in bcksystem.exclude
# If the directory being excluded is explicit then use wholename option so
# the path has to be an exact match.
# If the directory is quoted then use -name which matches any part of the full
# path.

findCL="find / -type d '(' "
count=0
exec 3<$etclocation/bcksystem.exclude
while read -u3 -ra input
do
	if [ $count != 0 ] ; then
		findCL=$findCL" -o "
	fi
	nameoption=$(echo $input | awk '{if (substr($0,1,1)=="'"'"'")
				print "-name "
				else
				print "-wholename ";}')
	findCL=$findCL$nameoption$input
	((count = count + 1))
done
exec 3<&-

findCL=$findCL" ')' -prune -o -type s -print > "$mntdir/sockets.exclude

output "Find command used:- $findCL" 0 FALSE

eval "$findCL"


# Selective uses --files-from so doesn't need starting node (root)
if [ $selective = FALSE ] ; then
	bckupCL+="/"
fi

output "Backup command used:- $bckupCL" 0 FALSE
eval "$bckupCL"
std_cmd_err_handler $?

# Mail disk stats
df -h | mailx -s "$script_short_desc" $notifyuser

# Mail backup file date hierarchy
ls -lht $mntdir | mailx -s "$script_short_desc" $notifyuser

# And exit.
script_exit_code=0
script_exit
